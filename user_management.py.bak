# --- START OF FILE user_management.py ---
import json
import uuid
import random
import os # Import the os module
from config import ADMIN_IDS  # Import ADMIN_IDS from config to avoid circular imports

# --- Referral Bonus Configuration ---
REFERRER_BONUS_CREDITS = 50  # Default bonus for referrer
REFERRED_BONUS_CREDITS = 25  # Default bonus for referred user

def _load_user_data():
    """Loads user data from user_data.json."""
    try:
        with open('user_data.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError as e: # Catch JSONDecodeError
        print(f"JSONDecodeError: user_data.json - Possible file corruption: {e}. Attempting to reset user data file.")
        try:
            os.rename('user_data.json', 'user_data.json.backup') # Backup the corrupted file
            with open('user_data.json', 'w') as f:
                json.dump({}, f) # Create a new empty user_data.json file
            print("user_data.json has been reset to an empty state. Corrupted file backed up as user_data.json.backup.")
        except Exception as reset_e:
            print(f"Error resetting user_data.json: {reset_e}. Please check file permissions and disk space.")
        return {} # Return empty user data in case of error or reset


def _save_user_data(user_data):
    """Saves user data to user_data.json."""
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f, indent=4)

def _load_redeem_data():
    """Loads redeem code data from redeem_codes.json."""
    try:
        with open('redeem_codes.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError as e:
        print("JSONDecodeError: redeem_codes.json - Possible file corruption. Returning empty redeem data.")
        return {}

def _save_redeem_data(redeem_data):
    """Saves redeem code data to redeem_codes.json."""
    with open('redeem_codes.json', 'w') as f:
        json.dump(redeem_data, f, indent=4)

def generate_redeem_codes(amount, num_codes, code_format="xxxx-xxxx-xxxx", premium=False):
    """Generates redeem codes and saves them to redeem_codes.json.

    Args:
        amount (int): Credits to add with the code (0 for premium codes).
        num_codes (int): Number of codes to generate.
        code_format (str, optional): Format of the code. Defaults to "xxxx-xxxx-xxxx".
        premium (bool, optional): Whether the code grants premium status. Defaults to False.

    Returns:
        list: List of generated redeem codes.
    """
    codes = []
    redeem_data = _load_redeem_data() # Load existing redeem codes
    for _ in range(num_codes):
        if code_format == "xxxx-xxxx-xxxx":
            code_parts = []
            for _ in range(3):
                code_parts.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=4)))
            code = '-'.join(code_parts)
        else: # Default format if none specified, or handle other formats if needed
            code = str(uuid.uuid4()).split('-')[0].upper() # Example fallback - you can adjust
        codes.append(code)
        redeem_data[code] = { # Store code data
            "credits": amount,
            "used": False,
            "premium": premium,
            "redeemed_by": None
        }
    _save_redeem_data(redeem_data) # Save all generated codes to file
    return codes

def redeem_credits(user_id, code):
    """Redeems a credit code for a user.

    Args:
        user_id (int): Telegram user ID.
        code (str): Redeem code entered by the user.

    Returns:
        str: "success", "invalid", "used", or other error messages.
    """
    user_data = _load_user_data()
    redeem_data = _load_redeem_data() # Load redeem codes data

    code_str = code.strip() # Trim whitespace and ensure code is treated as string

    if code_str not in redeem_data:
        return "invalid"

    if redeem_data[code_str]['used']:
        return "used"

    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {'credits': 0, 'gate_preference': 'auth', 'stats': {'approved': 0, 'declined': 0, 'ccn': 0, 'cvv': 0}, 'is_premium': False, 'registered': False, 'referral_code': generate_referral_code()} # Initialize user if not exists

    if redeem_data[code_str]['premium']:
        user_data[user_id_str]['is_premium'] = True # Grant premium status
        redeem_data[code_str]['credits'] = 0 # Premium codes give unlimited credits, set to 0 effectively
    else:
        user_data[user_id_str]['credits'] += redeem_data[code_str]['credits'] # Add credits

    redeem_data[code_str]['used'] = True # Mark code as used
    redeem_data[code_str]['redeemed_by'] = user_id # Record who used the code
    _save_user_data(user_data)
    _save_redeem_data(redeem_data) # Save updated redeem data
    return "success"

def generate_referral_code():
    """Generates a unique referral code."""
    return str(uuid.uuid4()).replace('-', '')[:10] # Generate a shorter referral code

def register_user(user_id, referrer_id=None):
    """Registers a new user and grants initial credits and referral bonuses.

    Args:
        user_id (int): Telegram user ID.
        referrer_id (int, optional): User ID of the referrer, if any. Defaults to None.

    Returns:
        str: "success" if registered, or error messages.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)

    if user_id_str in user_data and user_data[user_id_str].get('registered', False):
        return "already_registered" # Indicate user is already registered

    if user_id_str not in user_data:
        user_data[user_id_str] = {'credits': 0, 'gate_preference': 'auth', 'stats': {'approved': 0, 'declined': 0, 'ccn': 0, 'cvv': 0}, 'is_premium': False, 'registered': False, 'referral_code': generate_referral_code()} # Initialize new user if not exists

    initial_credits = 100 # Base initial credits
    user_data[user_id_str]['credits'] += initial_credits
    user_data[user_id_str]['registered'] = True # Mark user as registered

    if referrer_id:
        referrer_bonus = get_referrer_bonus()
        referred_bonus = get_referred_bonus()

        referrer_id_str = str(referrer_id)
        if referrer_id_str in user_data:
            user_data[referrer_id_str]['credits'] += referrer_bonus # Add bonus to referrer
            user_data[user_id_str]['credits'] += referred_bonus # Add bonus to referred user
            user_data[user_id_str]['referrer_id'] = referrer_id # Record referrer

    _save_user_data(user_data)
    return "success"


def add_credits_to_user(user_id, amount):
    """Adds credits to a user's balance.

    Args:
        user_id (int): Telegram user ID.
        amount (int): Number of credits to add.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {'credits': 0, 'gate_preference': 'auth', 'stats': {'approved': 0, 'declined': 0, 'ccn': 0, 'cvv': 0}, 'is_premium': False, 'registered': False, 'referral_code': generate_referral_code()} # Initialize new user if not exists
    user_data[user_id_str]['credits'] += amount
    _save_user_data(user_data)

def get_user_credits(user_id):
    """Gets the credit balance of a user.

    Args:
        user_id (int): Telegram user ID.

    Returns:
        int or str: Credit balance, or "Unlimited" for premium users.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data:
        if user_data[user_id_str].get('is_premium', False): # Check premium status
            return "Unlimited"
        return user_data[user_id_str]['credits']
    return 0 # Default credits for new users

def deduct_credits(user_id):
    """Deducts one credit from a user's balance if available.

    Args:
        user_id (int): Telegram user ID.

    Returns:
        bool: True if credit deducted, False if insufficient credits or user is premium.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data and not user_data[user_id_str].get('is_premium', False): # Deduct only if not premium
        if user_data[user_id_str]['credits'] > 0:
            user_data[user_id_str]['credits'] -= 1
            _save_user_data(user_data)
            return True
        else:
            return False # No credits to deduct
    return True # Premium users have unlimited credits - deduction always "successful"

def update_user_stats(user_id, status):
    """Updates user statistics (approved, declined, etc.).

    Args:
        user_id (int): Telegram user ID.
        status (str): Checking status (e.g., 'APPROVED', 'DECLINED', 'CCN', 'CVV').
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {'credits': 0, 'gate_preference': 'auth', 'stats': {'approved': 0, 'declined': 0, 'ccn': 0, 'cvv': 0}, 'is_premium': False, 'registered': False, 'referral_code': generate_referral_code()} # Initialize user if not exists

    stats = user_data[user_id_str]['stats']
    if status == 'APPROVED':
        stats['approved'] = stats.get('approved', 0) + 1
    elif status == 'DECLINED':
        stats['declined'] = stats.get('declined', 0) + 1
    elif status == 'CCN':
        stats['ccn'] = stats.get('ccn', 0) + 1
    elif status == 'CVV':
        stats['cvv'] = stats.get('cvv', 0) + 1
    _save_user_data(user_data)

def get_user_stats(user_id):
    """Gets user statistics.

    Args:
        user_id (int): Telegram user ID.

    Returns:
        dict or None: User stats dictionary, or None if user not found.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data:
        return user_data[user_id_str]['stats']
    return None

def set_user_gate_preference(user_id, gate_name):
    """Sets the preferred gate for a user.

    Args:
        user_id (int): Telegram user ID.
        gate_name (str): Gate name (e.g., 'auth', 'stripe2', 'stripe4').
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {'credits': 0, 'gate_preference': 'auth', 'stats': {'approved': 0, 'declined': 0, 'ccn': 0, 'cvv': 0}, 'is_premium': False, 'registered': False, 'referral_code': generate_referral_code()} # Initialize user if not exists
    user_data[user_id_str]['gate_preference'] = gate_name
    _save_user_data(user_data)

def get_user_gate_preference(user_id):
    """Gets the preferred gate for a user.

    Args:
        user_id (int): Telegram user ID.

    Returns:
        str: Gate name, defaults to 'auth'.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data:
        # Use .get() with a default value to avoid KeyError
        return user_data[user_id_str].get('gate_preference', 'auth')
    return "auth" # Default gate for new users

def is_admin(user_id):
    """Checks if a user is an admin.

    Args:
        user_id (int): Telegram user ID.

    Returns:
        bool: True if admin, False otherwise.
    """
    return user_id in ADMIN_IDS

def add_admin_user(user_id):
    """Adds a user ID to the list of admins."""
    global ADMIN_IDS # To modify the global list
    if user_id not in ADMIN_IDS:
        ADMIN_IDS.append(user_id)
        # In a real application, you might want to save ADMIN_IDS persistently
        # (e.g., to a file or database) instead of just in memory.
        return True
    return False # Already an admin

def remove_admin_user(user_id):
    """Removes a user ID from the list of admins, except the bot owner."""
    global ADMIN_IDS
    if user_id in ADMIN_IDS and user_id != ADMIN_IDS[0]: # Protect bot owner from removal
        ADMIN_IDS.remove(user_id)
        # If you persist ADMIN_IDS, save the updated list here
        return True
    return False # Not an admin or trying to remove bot owner

def get_admin_list():
    """Returns the list of admin user IDs."""
    return list(ADMIN_IDS) # Return a copy to avoid accidental modification


def is_premium(user_id):
    """Checks if a user is a premium user.

    Args:
        user_id (int): Telegram user ID.

    Returns:
        bool: True if premium, False otherwise.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data:
        return user_data[user_id_str].get('is_premium', False)
    return False

def is_registered(user_id):
    """Checks if a user is registered.

    Args:
        user_id (int): Telegram user ID.

    Returns:
        bool: True if registered, False otherwise.
    """
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data:
        return user_data[user_id_str].get('registered', False)
    return False # New users are not registered by default

def get_user_referral_link(user_id, bot_username):
    """Generates and returns a user's referral link."""
    user_data = _load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data:
        referral_code = user_data[user_id_str].get('referral_code')
        if not referral_code: # <--- Check if referral_code is missing
            referral_code = generate_referral_code() # Generate if missing
            user_data[user_id_str]['referral_code'] = referral_code # Save it
            _save_user_data(user_data) # Save user data
        if referral_code:
            return f"https://t.me/{bot_username}?start={referral_code}"
    return None

def get_referrer_bonus():
    """Returns the currently configured referrer bonus."""
    return REFERRER_BONUS_CREDITS

def get_referred_bonus():
    """Returns the currently configured referred bonus."""
    return REFERRED_BONUS_CREDITS

def set_referral_bonuses(referrer_bonus, referred_bonus):
    """Sets the referral bonuses.

    Args:
        referrer_bonus (int): Credits to give to the referrer.
        referred_bonus (int): Credits to give to the referred user.
    """
    global REFERRER_BONUS_CREDITS, REFERRED_BONUS_CREDITS
    REFERRER_BONUS_CREDITS = referrer_bonus
    REFERRED_BONUS_CREDITS = referred_bonus
# --- END OF FILE user_management.py ---